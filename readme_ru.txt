# Назначение 4
** Запись в блоге и запись в блоге в 23:59 в понедельник, 5/22/2017 **

** Это задание не будет демонстрацией **

Цель этого задания - начать использовать Node.js и некоторые из его встроенных модулей для создания очень простого веб-сервера, который обслуживает статический контент.

Вам предоставляется несколько файлов в `public /`, реализующих сайт Tweeter, над которым мы работали на протяжении всего курса, за исключением `index.js`. Если вы открыли файл index.html в своем браузере, вы увидите сайт, с которым вы уже знакомы, со всем его стилем и, когда вы добавляете свой собственный файл index.js, его взаимодействия. В дополнение к вашим знакомым файлам вам также предоставляется файл `404.html`, цель которого мы рассмотрим чуть позже.

Файл `server.js` - это файл, над которым вы будете работать для этого задания. Ваша задача состоит в том, чтобы завершить этот файл для реализации очень простого базового веб-сервера, удовлетворяющего следующим требованиям:

  * Сервер может использовать только встроенные модули Node (например, `http`,` fs`, `path` и т. Д.), Никаких сторонних модулей.

  * Сервер должен прослушивать запросы на порт, указанный переменной окружения `PORT`. Если `PORT` не присутствует в среде, сервер должен прослушивать порт 3000 по умолчанию.

  * Когда кто-то запрашивает путь с вашего сервера, который соответствует имени одного из файлов в `public /`, ваш сервер должен ответить содержимым этого файла и кодом состояния 200. Например, если вы запустите свой сервер На порт 3000 на вашем ноутбуке, вы должны иметь доступ к следующим файлам, введя следующие URL-адреса в свой браузер:
    * `public/index.html` - [http://localhost:3000/index.html](http://localhost:3000/index.html)
    * `public/index.js` - [http://localhost:3000/index.js](http://localhost:3000/index.js)
    * `public/style.css` - [http://localhost:3000/style.css](http://localhost:3000/style.css)
    * `public/404.html` - [http://localhost:3000/404.html](http://localhost:3000/404.html)
Обратите внимание, что если все подключено правильно, ваши страницы `index.html` и` 404.html` будут автоматически иметь стили и взаимодействия из `style.css` и` index.js`, потому что браузер увидит эти файлы, на которые ссылаются HTML и делать дополнительные запросы для этих файлов.

   * Когда кто-то запрашивает у вас корневой путь (т. Е. `/`), Он должен отвечать содержимым `public / index.html` и кодом состояния 200. Например, если вы запустите свой сервер на порте 3000 Ваш ноутбук и посетите
[http://localhost:3000](http://localhost:3000) in your laptop's browser, your server should send the contents of `public/index.html`.
* Если кто-то посещает путь на вашем сайте, который не соответствует имени какого-либо из файлов в `public /`, ваш сервер должен ответить содержимым `public / 404.html` и кодом состояния 404. Для Например, если вы запустили свой сервер на порте 3000 на своем ноутбуке и посетили браузер http: // localhost: 3000 / thispagedoesnotexist (http: // localhost: 3000 / thispagedoesnotexist), ваш сервер должен обслуживать содержимое ` public/404.html`.

  * Ваш сервер должен читать любой данный файл в `public /` с диска только один раз. Другими словами, содержимое каждого файла должно быть кэшировано в памяти сервера после первого чтения, и сервер должен использовать этот кеш при ответе на содержимое файла.

## Код блога

Добавьте запись в свой Блог кода, в котором будет отражен ваш опыт в этом задании. Вот несколько вопросов, на которые вы могли бы ответить (хотя это не единственные вопросы):

  * Что было сложным в задании и какие конкретные проблемы у вас были. Как вы решили эти проблемы?

  * Что вы узнали из задания? Были ли у вас какие-то особые идеи? Что вы обнаружили, что вы уже знали?

  * Какие ресурсы были полезны для выполнения задания? Конкретные веб-сайты? Лекции? Форум класса Пьяцца? ТА? Как вы использовали каждый из этих ресурсов?

  * Какая одна или две вещи вы имели для Google, чтобы выполнить задание?

## Представление

Как обычно, мы будем использовать GitHub Classroom для этого задания, и вы отправите свое задание через GitHub. Просто убедитесь, что ваши завершенные файлы зафиксированы и доведены до конечного срока выполнения основной веткой репозитория GitHub, созданной для вас GitHub Classroom. Хороший способ проверить, были ли ваши файлы безопасно отправлены, - это взглянуть на главную ветку репозитория своих заданий на веб-сайте github.com (например, github.com/OSU-CS290-Sp17/assignment-4-YourGitHubUsername/). Если ваши изменения отображаются там, вы можете считать ваши файлы представленными.

Помимо отправки задания через GitHub, вы должны отправить URL-адрес в запись блога кода (например, http://web.engr.oregonstate.edu/~YOUR_ONID_ID/cs290/blog.html) с помощью Canvas до указанной выше даты оплаты ,

## Критерии сортировки

Только изменения к `server.js` будут учитываться при сортировке этого задания. Изменения в других файлах будут проигнорированы, но вы должны добавить содержимое вашего `index.js` из Assignment 3 в` public / index.js`, чтобы получить полный эффект от назначения. Обратите также внимание, что при сортировке мы не будем запускать `npm install` для установки сторонних модулей.

Задание стоит 100 очков:

  * 10 баллов: сервер прослушивает порт, указанный переменной окружения `PORT` или 3000 по умолчанию.

  * 40 баллов: сервер обслуживает файлы из `public /` со статусом 200 при посещении соответствующего URL-адреса.

  * 20 баллов: сервер обслуживает `public / index.html` со статусом 200 при посещении корневого URL-адреса (` / `).

  * 20 очков: сервер обслуживает `public / 404.html` со статусом 404, когда посещается путь URL, не соответствующий ни одному файлу в` public / `.

  * 10 баллов: сервер однократно считывает файлы в `public /` и кэширует их.